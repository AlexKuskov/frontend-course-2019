{"version":3,"sources":["BoardCell.js","BoardRow.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","state","cell","rowIndex","index","i","board","loosingCell","this","setState","result","showCell","class","onClick","bind","renderCell","Row","React","Component","cells","row","map","key","renderCells","Board","Array","from","length","size","Math","round","random","complexity","forEach","rowI","cellI","bombsCount","filter","gameFinished","gameLost","openedCount","diff","reduce","a","b","cellIndex","click","rI","_cell","cI","justOpened","idx","c","newCells","concat","renderResults","renderRows","App","currentComplexity","currentSize","play","value","console","log","renderBoard","className","defaultValue","min","max","step","onChange","handleComplexity","handleSize","start","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.669dedb1.chunk.js","sourcesContent":["import React from 'react';\n\nclass Cell extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cell: props.cell, // [1 = bomb/0 = normal, display?]\n      rowIndex: props.rowIndex,\n      index: props.i,\n      board: props.board,\n      loosingCell: false\n    };\n  }\n\n  renderCell() {\n    if(this.state.cell[1] !== 0) {\n      if(this.state.cell[2] === 0) {\n        return ' '\n      } else {\n        return this.state.cell[2]\n      }\n    } else {\n      return ' ';\n    }\n  }\n\n  showCell() {\n    this.setState(({loosingCell}) => {\n      const result = this.props.showCell(this.state.rowIndex, this.state.index, true)\n      return { loosingCell: result !== null ? result : loosingCell };\n    });\n  }\n\n  render() { return <td class={`${this.state.cell[1] === 2 && 'opened'} ${this.state.loosingCell && 'loosing-cell'}`} onClick={this.showCell.bind(this)}><p>{this.renderCell(this.state.Row)}</p></td> }\n}\n\nexport default Cell;\n","import React from 'react';\nimport Cell from './BoardCell';\n\nclass Row extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      cells: props.row,\n      index: props.i,\n      board: props.board\n    };\n  }\n\n  renderCells() {\n    return this.state.cells.map((cell, i) => (<Cell key={'cell-' + this.state.index + '-' + i } i={i} rowIndex={this.state.index} cell={cell} board={this.state.board} showCell={this.props.showCell}/>))\n  }\n\n  render() {\n    return (\n      <tr>\n        {this.renderCells()}\n      </tr>\n    )\n  }\n}\n\nexport default Row;\n","import React from 'react';\nimport Row from './BoardRow'\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const board = Array.from({length: props.size}, () => Array.from({length: props.size}, () => [Math.round(Math.random() * props.complexity), 0, null]));\n    board.forEach((row, rowI) => row.forEach((cell, cellI) => board[rowI][cellI][2] = this.renderCell({cell, rowI, cellI, board})))\n    let bombsCount = 0;\n    board.forEach(row => bombsCount = bombsCount + row.filter(cell => cell[0] === 1).length)\n    this.state = {board, gameFinished: false, gameLost: false, bombsCount, openedCount: 0};\n  }\n\n  renderCell({cell, board, rowI, cellI}) {\n    if(cell[0] === 1) {\n      return '*'\n    } else {\n      const variety = [\n        [1, 0],\n        [1, 1],\n        [0, 1],\n        [-1, 1],\n        [-1, 0],\n        [-1, -1],\n        [0, -1],\n        [1, -1]\n      ]\n      return variety.map(diff => ((board[rowI + diff[0]] || [])[cellI + diff[1]] || [])[0] || 0).reduce((a, b) => a + b, 0)\n    }\n  }\n\n  showCell(rowIndex, cellIndex, click, cells) {\n    if(!this.state.gameFinished) {\n      const cell = (this.state.board[rowIndex] || [])[cellIndex]\n      if(click) {\n        if(cell[0] === 1) {\n          // oh no you clicked on bomb\n          this.setState(({board}) => {\n            board.forEach((row, rI) => {\n              row.forEach((_cell, cI) => { if(board[rI][cI][1] === 0) board[rI][cI][1] = 1 })\n            })\n            return {board, gameFinished: true, gameLost: true};\n          })\n          return true;\n        } else {\n          this.setState(({board, openedCount, bombsCount}) => {\n            const justOpened = this.showCell(rowIndex, cellIndex, false, [])\n            justOpened.forEach(idx => board[idx[0]][idx[1]][1] = 2)\n            return {board, openedCount: openedCount + justOpened.length, gameFinished: (this.props.size ** 2) - bombsCount === openedCount + justOpened.length};\n          })\n        }\n        return false;\n      } else {\n        if(cells.length > this.props.size ** 2) {\n          throw 'loop';\n        }\n        if(!cell || (cell && (cell[0] === 1 || cells.filter(c => c[0] === rowIndex && c[1] === cellIndex).length !== 0))) {\n          return cells;\n        } else {\n            const variety = [\n              [1,0],\n              [0,1],\n              [-1, 0],\n              [0, -1]\n            ]\n          let newCells = cells.concat([[rowIndex, cellIndex]])\n          if(cell[2] === 0) {\n            variety.forEach(diff => {\n              newCells = this.showCell(rowIndex + diff[0], cellIndex + diff[1], false, newCells)\n            })\n          }\n          return newCells\n        }\n      }\n    } else {\n      return null;\n    }\n  }\n\n  renderRows() {\n    return this.state.board.map((row, i) => (<Row key={'row-' + i} i={i} row={row} board={this.state.board} showCell={this.showCell.bind(this)}/>))\n  }\n\n  renderResults() {\n    if(this.state.gameFinished) {\n      if(this.state.gameLost) {\n        return <p>You lost!</p>\n      } else {\n        return <p>You won</p>\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderResults()}\n        <table>\n          {this.renderRows()}\n        </table>\n      </div>\n    )\n  }\n}\n\nexport default Board;\n","import React from 'react';\nimport Board from './Board';\nimport Slider from 'rc-slider';\nimport './App.css';\nimport 'rc-slider/assets/index.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      complexity: 0.55,\n      size: 20,\n      currentComplexity: 0,\n      currentSize: 0,\n      play: 0\n    }\n  }\n\n  handleComplexity(value) {\n    this.setState(() => { return {complexity: value}; });\n  }\n\n  handleSize(value) {\n    this.setState(() => { return {size: value}; });\n  }\n\n  start() {\n    this.setState(({complexity, size, play}) => { return { currentComplexity: complexity, currentSize: size, play: play + 1 } })\n    console.log(this.renderBoard())\n  }\n\n  renderBoard() {\n    if(this.state.play !== 0) {\n      return <Board key={'play' + this.state.play} size={this.state.currentSize} complexity={this.state.currentComplexity}/>\n    }\n  }\n\n  render() {\n    return (\n      <div class=\"wrapper\">\n        <p class=\"slider-label\">Complexity</p>\n        <Slider className=\"slider\" defaultValue={this.state.complexity} min={0.55} max={0.65} step={0.002} onChange={this.handleComplexity.bind(this)}/>\n        <p class=\"slider-label\">Size</p>\n        <Slider className=\"slider\" defaultValue={this.state.size} min={10} max={25} onChange={this.handleSize.bind(this)}/>\n        <button onClick={this.start.bind(this)}>Play</button>\n        {this.renderBoard()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}