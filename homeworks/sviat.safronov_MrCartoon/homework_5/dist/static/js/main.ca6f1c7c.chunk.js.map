{"version":3,"sources":["BoardCell.js","BoardRow.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","state","cell","rowIndex","index","i","loosingCell","this","setState","result","showCell","className","onClick","bind","renderCell","Row","React","Component","cells","row","map","key","renderCells","Board","board","Array","from","length","size","Math","round","random","complexity","forEach","rowI","cellI","bombsCount","filter","gameFinished","gameLost","openedCount","diff","reduce","a","b","cellIndex","click","tmpBoard","rI","_cell","cI","justOpened","idx","c","newCells","concat","renderResults","renderRows","App","currentComplexity","currentSize","play","value","console","log","renderBoard","defaultValue","min","max","step","onChange","handleComplexity","handleSize","start","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca6f1c7c.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Cell extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cell: props.cell, // [1 = bomb/0 = normal, display?]\n            rowIndex: props.rowIndex,\n            index: props.i,\n            loosingCell: false,\n        };\n    }\n\n    renderCell() {\n        if (this.state.cell[1] !== 0) {\n            if (this.state.cell[2] === 0) {\n                return ' ';\n            }\n            return this.state.cell[2];\n        }\n        return ' ';\n    }\n\n    showCell() {\n        this.setState(({ loosingCell }) => {\n            const result = this.props.showCell(this.state.rowIndex, this.state.index, true);\n            return { loosingCell: result !== null ? result : loosingCell };\n        });\n    }\n\n    render() { return <td className={`${this.state.cell[1] === 2 && 'opened'} ${this.state.loosingCell && 'loosing-cell'}`} onClick={this.showCell.bind(this)}><p>{this.renderCell(this.state.Row)}</p></td>; }\n}\n\nCell.propTypes = {\n    cell: PropTypes.array.isRequired,\n    rowIndex: PropTypes.number.isRequired,\n    showCell: PropTypes.func.isRequired,\n    i: PropTypes.number.isRequired,\n};\n\nexport default Cell;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from './BoardCell';\n\nclass Row extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            cells: props.row,\n            index: props.i,\n        };\n    }\n\n    renderCells() {\n        return this.state.cells.map((cell, i) => (<Cell key={`cell-${this.state.index}-${i}` } i={i} rowIndex={this.state.index} cell={cell} showCell={this.props.showCell}/>));\n    }\n\n    render() {\n        return (\n            <tr>\n                {this.renderCells()}\n            </tr>\n        );\n    }\n}\n\nRow.propTypes = {\n    row: PropTypes.array.isRequired,\n    i: PropTypes.number.isRequired,\n    showCell: PropTypes.func.isRequired,\n};\n\nexport default Row;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Row from './BoardRow';\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const board = Array.from(\n            { length: props.size }, () => Array.from(\n                { length: props.size },\n                () => [Math.round(Math.random() * props.complexity), 0, null],\n            ),\n        );\n        board.forEach((row, rowI) => row.forEach(\n            (cell, cellI) => {\n                board[rowI][cellI][2] = this.renderCell({\n                    cell, rowI, cellI, board,\n                });\n            },\n        ));\n        let bombsCount = 0;\n        board.forEach((row) => { bombsCount += row.filter((cell) => cell[0] === 1).length; });\n        this.state = {\n            board, gameFinished: false, gameLost: false, bombsCount, openedCount: 0,\n        };\n    }\n\n    renderCell({\n        cell, board, rowI, cellI,\n    }) {\n        if (cell[0] === 1) {\n            return '*';\n        }\n        const variety = [\n            [1, 0],\n            [1, 1],\n            [0, 1],\n            [-1, 1],\n            [-1, 0],\n            [-1, -1],\n            [0, -1],\n            [1, -1],\n        ];\n        return variety.map(\n            (diff) => ((board[rowI + diff[0]] || [])[cellI + diff[1]] || [])[0] || 0,\n        ).reduce((a, b) => a + b, 0);\n    }\n\n    showCell(rowIndex, cellIndex, click, cells) {\n        if (!this.state.gameFinished) {\n            const cell = (this.state.board[rowIndex] || [])[cellIndex];\n            if (click) {\n                if (cell[0] === 1) {\n                    // oh no you clicked on bomb\n                    this.setState(({ board }) => {\n                        const tmpBoard = board;\n                        tmpBoard.forEach((row, rI) => {\n                            row.forEach((_cell, cI) => {\n                                if (tmpBoard[rI][cI][1] === 0) tmpBoard[rI][cI][1] = 1;\n                            });\n                        });\n                        return { board: tmpBoard, gameFinished: true, gameLost: true };\n                    });\n                    return true;\n                }\n                this.setState(({ board, openedCount, bombsCount }) => {\n                    const tmpBoard = board;\n                    const justOpened = this.showCell(rowIndex, cellIndex, false, []);\n                    justOpened.forEach((idx) => { tmpBoard[idx[0]][idx[1]][1] = 2; });\n                    return {\n                        board: tmpBoard,\n                        openedCount: openedCount + justOpened.length,\n                        gameFinished: (this.props.size ** 2) - bombsCount\n                      === openedCount + justOpened.length,\n                    };\n                });\n\n                return false;\n            }\n            if (!cell || (cell && (cell[0] === 1\n            || cells.filter((c) => c[0] === rowIndex && c[1] === cellIndex).length !== 0))) {\n                return cells;\n            }\n            const variety = [\n                [1, 0],\n                [0, 1],\n                [-1, 0],\n                [0, -1],\n            ];\n            let newCells = cells.concat([[rowIndex, cellIndex]]);\n            if (cell[2] === 0) {\n                variety.forEach((diff) => {\n                    newCells = this.showCell(\n                        rowIndex + diff[0], cellIndex + diff[1], false, newCells,\n                    );\n                });\n            }\n            return newCells;\n        }\n        return null;\n    }\n\n    renderRows() {\n        return this.state.board.map((row, i) => (<Row key={`row-${i}`} i={i} row={row} showCell={this.showCell.bind(this)}/>));\n    }\n\n    renderResults() {\n        if (this.state.gameFinished) {\n            if (this.state.gameLost) {\n                return <p>You lost!</p>;\n            }\n            return <p>You won</p>;\n        }\n        return '';\n    }\n\n    render() {\n        return (\n            <div>\n                {this.renderResults()}\n                <table>\n                    {this.renderRows()}\n                </table>\n            </div>\n        );\n    }\n}\n\nBoard.propTypes = {\n    size: PropTypes.number.isRequired,\n    complexity: PropTypes.number.isRequired,\n};\n\n\nexport default Board;\n","import React from 'react';\nimport Slider from 'rc-slider';\nimport Board from './Board';\nimport './App.css';\nimport 'rc-slider/assets/index.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            complexity: 0.55,\n            size: 20,\n            currentComplexity: 0,\n            currentSize: 0,\n            play: 0,\n        };\n    }\n\n    handleComplexity(value) {\n        this.setState(() => ({ complexity: value }));\n    }\n\n    handleSize(value) {\n        this.setState(() => ({ size: value }));\n    }\n\n    start() {\n        this.setState(\n            ({ complexity, size, play }) => (\n                { currentComplexity: complexity, currentSize: size, play: play + 1 }\n            ),\n        );\n        console.log(this.renderBoard());\n    }\n\n    renderBoard() {\n        if (this.state.play !== 0) {\n            return <Board key={`play${this.state.play}`} size={this.state.currentSize} complexity={this.state.currentComplexity}/>;\n        }\n        return '';\n    }\n\n    render() {\n        return (\n            <div className=\"wrapper\">\n                <p className=\"slider-label\">Complexity</p>\n                <Slider className=\"slider\" defaultValue={this.state.complexity} min={0.55} max={0.65} step={0.002} onChange={this.handleComplexity.bind(this)}/>\n                <p className=\"slider-label\">Size</p>\n                <Slider className=\"slider\" defaultValue={this.state.size} min={10} max={25} onChange={this.handleSize.bind(this)}/>\n                <button onClick={this.start.bind(this)}>Play</button>\n                {this.renderBoard()}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            const tmpRegistration = registration;\n            tmpRegistration.onupdatefound = () => {\n                const installingWorker = tmpRegistration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(tmpRegistration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(tmpRegistration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost.\n                // Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}